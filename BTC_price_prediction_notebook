{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP+0cWk9VYyhLRPSPWUGqwD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Libraries import**"],"metadata":{"id":"c3OsJ_iEyBrC"}},{"cell_type":"code","source":["!pip install ta\n","!pip install pandas-datareader\n","!pip install --upgrade scikit-learn==1.2.2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2oUoQc9TyDD7","executionInfo":{"status":"ok","timestamp":1738170514667,"user_tz":-240,"elapsed":11051,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}},"outputId":"169aa677-5afe-4ae9-be06-0f1331f9b6c4"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: ta in /usr/local/lib/python3.11/dist-packages (0.11.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from ta) (1.26.4)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from ta) (2.2.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->ta) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->ta) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->ta) (2025.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->ta) (1.17.0)\n","Requirement already satisfied: pandas-datareader in /usr/local/lib/python3.11/dist-packages (0.10.0)\n","Requirement already satisfied: lxml in /usr/local/lib/python3.11/dist-packages (from pandas-datareader) (5.3.0)\n","Requirement already satisfied: pandas>=0.23 in /usr/local/lib/python3.11/dist-packages (from pandas-datareader) (2.2.2)\n","Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.11/dist-packages (from pandas-datareader) (2.32.3)\n","Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.23->pandas-datareader) (1.26.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.23->pandas-datareader) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.23->pandas-datareader) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.23->pandas-datareader) (2025.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->pandas-datareader) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->pandas-datareader) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->pandas-datareader) (2.3.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->pandas-datareader) (2024.12.14)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=0.23->pandas-datareader) (1.17.0)\n","Requirement already satisfied: scikit-learn==1.2.2 in /usr/local/lib/python3.11/dist-packages (1.2.2)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.11/dist-packages (from scikit-learn==1.2.2) (1.26.4)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.11/dist-packages (from scikit-learn==1.2.2) (1.13.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from scikit-learn==1.2.2) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn==1.2.2) (3.5.0)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import TimeSeriesSplit, GridSearchCV\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.decomposition import PCA\n","from xgboost import XGBClassifier\n","from sklearn.metrics import roc_auc_score, accuracy_score, precision_score, recall_score, precision_recall_curve\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n","import yfinance as yf\n","import ta\n","from pandas_datareader import data as pdr\n","import requests\n","import warnings\n","warnings.filterwarnings(\"ignore\")"],"metadata":{"id":"sphA7o-1iB0l","executionInfo":{"status":"ok","timestamp":1738170514668,"user_tz":-240,"elapsed":9,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}}},"execution_count":75,"outputs":[]},{"cell_type":"markdown","source":["# **Project Goal**\n","\n","Our project aims to predict Bitcoin’s price movement within a specific time horizon, identifying whether it will rise by a certain percentage (e.g., +5%) with a probability above 50%. The overarching objective is to design a model that can provide potentially stable profits by minimizing false signals.\n","\n","**Core data**\n","\n","We based our analysis on historical BTC-USD price data sourced from Yahoo Finance. This dataset provided the foundational OHLCV (Open, High, Low, Close, Volume) data for Bitcoin, which we used to derive various technical and macroeconomic features."],"metadata":{"id":"3VBusk-doUO0"}},{"cell_type":"code","source":["#loading dataset for specific ticker from yfinance\n","def load_data(ticker='BTC-USD', period='max'):\n","    df = yf.download(ticker, period=period)\n","    df = df.droplevel(level=1, axis=1)\n","    df.dropna(inplace=True)\n","    return df"],"metadata":{"id":"L3cC3xAZiQTM","executionInfo":{"status":"ok","timestamp":1738170514668,"user_tz":-240,"elapsed":8,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}}},"execution_count":76,"outputs":[]},{"cell_type":"markdown","source":["# **Features and Indicators**\n","\n","**Proportional Technical Indicators**\n","\n","We focus on proportional (normalized) indicators so that the model’s predictions remain robust regardless of Bitcoin’s absolute price.\n","These indicators come from classic technical analysis literature (e.g., John J. Murphy’s Technical Analysis of the Financial Markets) and are well-documented in libraries like ta for Python.\n","\n","**Additional On-Chain Indicators (Crypto-Specific)**\n","\n","In principle, there exist advanced on-chain metrics such as Active Addresses compared to total addresses, transaction volumes, realized cap, MVRV, etc. However, many of these data sources require paid subscriptions (e.g., Glassnode, CryptoQuant). While they can significantly enhance predictive power, their cost often prohibits use in smaller, proof-of-concept projects. Still, the fact these indicators are behind paywalls suggests they can boost model profitability if utilized in real-world trading scenarios."],"metadata":{"id":"UVyhexumol80"}},{"cell_type":"code","source":["def add_proportional_indicators(\n","    df,\n","    rsi_window=14,\n","    stoch_window=14,\n","    stoch_smooth=3,\n","    wpr_lbp=14,\n","    bb_window=20,\n","    bb_std=2,\n","    macd_fast=12,\n","    macd_slow=26,\n","    macd_sign=9,\n","    adx_window=14,\n","    mfi_window=14,\n","    cci_window=20,\n","    atr_window=14,\n","    ):\n","\n","    # 1. RSI, Stoch, Williams %R, Bollinger %B, MACD(proportional)\n","    df['rsi'] = ta.momentum.RSIIndicator(close=df['Close'], window=rsi_window).rsi()\n","\n","    stoch = ta.momentum.StochasticOscillator(\n","        high=df['High'], low=df['Low'], close=df['Close'],\n","        window=stoch_window, smooth_window=stoch_smooth\n","    )\n","    df['stoch_k'] = stoch.stoch()\n","    df['stoch_d'] = stoch.stoch_signal()\n","\n","    df['williams_r'] = ta.momentum.WilliamsRIndicator(\n","        high=df['High'], low=df['Low'], close=df['Close'], lbp=wpr_lbp\n","    ).williams_r()\n","\n","    bb = ta.volatility.BollingerBands(\n","        close=df['Close'], window=bb_window, window_dev=bb_std\n","    )\n","    df['bb_b'] = bb.bollinger_pband()\n","\n","    macd_obj = ta.trend.MACD(\n","        close=df['Close'], window_slow=macd_slow, window_fast=macd_fast, window_sign=macd_sign\n","    )\n","    df['macd_diff'] = macd_obj.macd_diff()\n","    df['macd_prop'] = df['macd_diff'] / df['Close'] * 100\n","    df.drop(columns=['macd_diff'], inplace=True)\n","\n","    # 2. ADX (0..100)\n","    adx = ta.trend.ADXIndicator(\n","        high=df['High'], low=df['Low'], close=df['Close'], window=adx_window\n","    )\n","    df['adx'] = adx.adx()\n","    df['di_plus'] = adx.adx_pos()\n","    df['di_minus'] = adx.adx_neg()\n","\n","    # 3. MFI (0..100)\n","    mfi = ta.volume.MFIIndicator(\n","        high=df['High'], low=df['Low'], close=df['Close'], volume=df['Volume'], window=mfi_window\n","    )\n","    df['mfi'] = mfi.money_flow_index()\n","\n","    # 4. CCI (±200+)\n","    cci = ta.trend.CCIIndicator(\n","        high=df['High'], low=df['Low'], close=df['Close'], window=cci_window\n","    )\n","    df['cci'] = cci.cci()\n","\n","    # 5. ATR (relative)\n","    atr = ta.volatility.AverageTrueRange(\n","        high=df['High'], low=df['Low'], close=df['Close'], window=atr_window\n","    )\n","    df['atr'] = atr.average_true_range()\n","    df['atr_rel'] = df['atr'] / df['Close'] * 100\n","    df.drop(columns=['atr'], inplace=True)\n","\n","    df.dropna(inplace=True)\n","\n","    return df"],"metadata":{"id":"DhqyrxUsReyi","executionInfo":{"status":"ok","timestamp":1738170514668,"user_tz":-240,"elapsed":8,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}}},"execution_count":77,"outputs":[]},{"cell_type":"markdown","source":["**Additional Non-Technical Features**\n","\n","\n","*   **Fear & Greed Index:** Reflects the market’s emotional state (greed versus fear).\n","\n","*Limitation: Data is only available from 2018 onward, reducing the historical sample size.*\n","*   **Dollar Index (DXY):** A measure of the U.S. dollar strength relative to a basket of other currencies.\n","\n","*Stronger dollar movements may correlate with Bitcoin price behavior.*\n","\n","\n","**Macro Indicators**\n","\n","\n","\n","*   **Consumer Price Index (CPI)**: reflects inflation levels.\n","*   **Federal Funds Rate:** shows central bank policy stance.\n","\n","\n","Empirically, these features can further stabilize and improve performance, as macroeconomic conditions often affect risk-on/off sentiment in crypto markets."],"metadata":{"id":"Giv651wwqAzI"}},{"cell_type":"code","source":["def load_fear_greed_index(limit=10000, date_format='world'):\n","    url = \"https://api.alternative.me/fng/\"\n","    params = {\n","        'limit': limit,\n","        'format': 'json',\n","        'date_format': date_format\n","    }\n","\n","    response = requests.get(url, params=params)\n","    data = response.json()\n","\n","    records = data.get('data', [])\n","\n","    df_fg = pd.DataFrame(records)\n","\n","    df_fg['timestamp'] = pd.to_datetime(df_fg['timestamp'], format='%d-%m-%Y')\n","    df_fg.set_index('timestamp', inplace=True)\n","    df_fg.drop(columns=['time_until_update', 'value_classification'], inplace=True)\n","    df_fg.rename(columns={'value': 'fear_greed'}, inplace=True)\n","    df_fg['fear_greed'] = df_fg['fear_greed'].astype(float)\n","\n","    return df_fg\n","\n","def add_fear_greed_index(df, df_fg):\n","    df = df.copy()\n","    df = df.join(df_fg, how='inner')\n","    return df\n","\n","def add_dollar_index_feature(df):\n","    start_date = df.index.min().strftime('%Y-%m-%d')\n","    end_date = df.index.max().strftime('%Y-%m-%d')\n","\n","    dxy_data = yf.download('DX-Y.NYB', start=start_date, end=end_date)\n","    dxy_data = dxy_data.droplevel(level=1, axis=1)\n","    dxy = dxy_data[['Close']]\n","\n","    dxy.rename(columns={'Close': 'dollar_index'}, inplace=True)\n","    df = df.join(dxy, how='inner')\n","\n","    return df\n","\n","def add_macro_indicators(df_prices):\n","    start_date = df_prices.index.min()\n","    end_date = df_prices.index.max()\n","\n","    df_prices = df_prices.copy()\n","    if not isinstance(df_prices.index, pd.DatetimeIndex):\n","        df_prices.index = pd.to_datetime(df_prices.index)\n","    macro_series = {\n","        'CPI':       'CPIAUCSL',  # Consumer Price Index\n","        'FedFunds':  'FEDFUNDS',  # Effective Federal Funds Rate\n","    }\n","    df_macro = pd.DataFrame()\n","    for col_name, fred_code in macro_series.items():\n","        try:\n","            temp = pdr.DataReader(fred_code, 'fred', start_date, end_date)\n","            temp.rename(columns={fred_code: col_name}, inplace=True)\n","            if df_macro.empty:\n","                df_macro = temp\n","            else:\n","                df_macro = df_macro.join(temp, how='outer')\n","        except Exception as e:\n","            print(f\"Error when loading {fred_code}: {e}\")\n","\n","    all_days = pd.date_range(start=df_prices.index.min(), end=df_prices.index.max(), freq='D')\n","    df_macro_daily = df_macro.reindex(all_days).ffill()\n","\n","    df_merged = df_prices.join(df_macro_daily, how='left')\n","\n","    df_merged.ffill(inplace=True)\n","    df_merged.dropna(inplace=True)\n","\n","    return df_merged"],"metadata":{"id":"Bs-6bS9X2oj1","executionInfo":{"status":"ok","timestamp":1738170514668,"user_tz":-240,"elapsed":7,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}}},"execution_count":78,"outputs":[]},{"cell_type":"markdown","source":["**Sliding Window (Lag Features) and PCA**\n","\n","\n","*   **Sliding Window:** Considering the influence of the previous N days’ data on the target price. For instance, using 5, 10, or 15 days of historical indicators or prices.\n","*   **PCA (Principal Component Analysis):** Potentially applies after forming a large feature set (especially from multiple lag days) to reduce dimensionality."],"metadata":{"id":"6BfEobuErDlJ"}},{"cell_type":"code","source":["features=['rsi','stoch_k','stoch_d','williams_r', 'bb_b', 'macd_prop']\n","\n","def add_sliding_window_in_df(df, features=features, window_size=5):\n","    df = df.copy()\n","    for f in features:\n","        for i in range(1, window_size + 1):\n","            df[f'{f}_lag_{i}'] = df[f].shift(i)\n","    df.dropna(inplace=True)\n","\n","    return df\n","\n","def add_pca(X_train, X_valid, X_test, n_components=3, visualize=True):\n","    #normalization before implementing pca\n","    scaler = StandardScaler()\n","    X_train_scaled = scaler.fit_transform(X_train)\n","    X_valid_scaled = scaler.transform(X_valid)\n","    X_test_scaled = scaler.transform(X_test)\n","\n","    pca = PCA(n_components=n_components)\n","    X_train_pca = pca.fit_transform(X_train_scaled)\n","    X_valid_pca = pca.transform(X_valid_scaled)\n","    X_test_pca = pca.transform(X_test_scaled)\n","\n","    pca_col_names = [f'pca_{i+1}' for i in range(n_components)]\n","    X_train_pca_df = pd.DataFrame(X_train_pca, columns=pca_col_names, index=X_train.index)\n","    X_valid_pca_df = pd.DataFrame(X_valid_pca, columns=pca_col_names, index=X_valid.index)\n","    X_test_pca_df = pd.DataFrame(X_test_pca, columns=pca_col_names, index=X_test.index)\n","\n","    #this way we can se how much variance we omit\n","    if visualize:\n","        plt.plot(np.arange(1, len(pca.explained_variance_ratio_)+1),\n","        np.cumsum(pca.explained_variance_ratio_), marker='o')\n","        plt.xlabel('Number of Components')\n","        plt.ylabel('Explained Variance')\n","        plt.show()\n","\n","    return X_train_pca_df, X_valid_pca_df, X_test_pca_df\n"],"metadata":{"id":"ZdmMRjL-6ONX","executionInfo":{"status":"ok","timestamp":1738170514668,"user_tz":-240,"elapsed":7,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}}},"execution_count":79,"outputs":[]},{"cell_type":"markdown","source":["#**Target Definition**\n","\n","We considered two methods to label the data:\n","\n","**Take Profit Only:** If Bitcoin’s price rises by +X% within N-days, label = 1. Otherwise, 0.\n","\n","*This approach can yield a more balanced dataset since downward movements are not strictly penalized.*\n","\n","**Take Profit & Stop Loss:** The price must reach +X% without first dipping below −Y% within N-days\n","\n","*This typically creates a more unbalanced dataset, because any significant drop triggers a stop and results in more negative labels.\n","However, it promises a more stable trading strategy if successfully captured.*"],"metadata":{"id":"MUVc4-9Lr6f2"}},{"cell_type":"code","source":["def target_takeprofit(df, horizon=5, tp=0.03):\n","    df = df.copy()\n","    df['future_high'] = (\n","        df['High']\n","          .shift(-1)\n","          .rolling(window=horizon)\n","          .max()\n","          .shift(-(horizon-1))\n","    )\n","\n","    df['target'] = (df['future_high'] > df['Close'] * (1 + tp)).astype(int)\n","\n","    df = df.iloc[:-horizon]\n","    df.drop(columns=['future_high', 'Close','Open','High','Low','Volume'], inplace=True)\n","\n","    return df\n","\n","def target_takeprofit_stoploss(df, horizon=5, tp=0.03, sl=0.02):\n","    df = df.copy()\n","    df['target'] = np.nan\n","\n","    prices = df['Close'].values\n","    highs = df['High'].values\n","    lows = df['Low'].values\n","\n","    n = len(df)\n","\n","    for i in range(n - horizon):\n","        start_price = prices[i]\n","        tp_level = start_price * (1 + tp)\n","        sl_level = start_price * (1 - sl)\n","\n","        window_highs = highs[i+1 : i + horizon + 1]\n","        window_lows  = lows [i+1 : i + horizon + 1]\n","\n","        idx_tp_candidates = np.where(window_highs >= tp_level)[0]\n","        day_tp = idx_tp_candidates[0] if len(idx_tp_candidates) > 0 else None\n","\n","        idx_sl_candidates = np.where(window_lows <= sl_level)[0]\n","        day_sl = idx_sl_candidates[0] if len(idx_sl_candidates) > 0 else None\n","\n","        if (day_tp is None) and (day_sl is None):\n","            df.loc[df.index[i], 'target'] = 0\n","        elif (day_tp is not None) and (day_sl is None):\n","            df.loc[df.index[i], 'target'] = 1\n","        elif (day_tp is None) and (day_sl is not None):\n","            df.loc[df.index[i], 'target'] = 0\n","        else:\n","            if day_tp < day_sl:\n","                df.loc[df.index[i], 'target'] = 1\n","            else:\n","                df.loc[df.index[i], 'target'] = 0\n","\n","    df.dropna(subset=['target'], inplace=True)\n","    df.drop(columns=['Close','Open','High','Low','Volume'], inplace=True)\n","\n","    return df\n"],"metadata":{"id":"dgESbwP8TSnj","executionInfo":{"status":"ok","timestamp":1738170514668,"user_tz":-240,"elapsed":6,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}}},"execution_count":80,"outputs":[]},{"cell_type":"markdown","source":["# **Data Splitting**\n","Given these are time series, we use a time-aware split\n","\n","**Training (Train):** Used for both initial model building and cross-validation.\n","\n","**Validation (Valid):** An intermediary set for checking out-of-sample performance and adjusting thresholds.\n","\n","**Test:** A final “hold-out” set, never touched until the end, to measure true generalization."],"metadata":{"id":"A0pm69nosrA5"}},{"cell_type":"code","source":["def train_valid_test_split(X, y, train_size=0.6, valid_size=0.15):\n","    n = len(X)\n","    train_end = int(n * train_size)\n","    valid_end = int(n * (train_size + valid_size))\n","\n","    X_train, y_train = X[:train_end], y[:train_end]\n","    X_valid, y_valid = X[train_end:valid_end], y[train_end:valid_end]\n","    X_test,  y_test  = X[valid_end:], y[valid_end:]\n","\n","    return X_train, y_train, X_valid, y_valid, X_test, y_test\n"],"metadata":{"id":"-xWAZFsJg5ta","executionInfo":{"status":"ok","timestamp":1738170514668,"user_tz":-240,"elapsed":6,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}}},"execution_count":81,"outputs":[]},{"cell_type":"markdown","source":["# **Workflow Overview**\n","**Feature Engineering:**\n","\n","First, we load the dataset and add the core proportional technical indicators. Preliminary tests on out-of-the-box models show that incorporating the Dollar Index and macroeconomic indicators slightly improves the results. Although utilizing the Fear/Greed Index reduces the amount of available historical data, it still enhances overall performance.\n","\n","**Experimenting with Horizon & Stop-Loss:**\n","\n","We tested different horizons (e.g., 10 days) and thresholds (+5% TP, −4% SL). These gave us a somewhat balanced approach, ensuring balances dataset and potentially profitable strategy"],"metadata":{"id":"pWY7S5gttS-f"}},{"cell_type":"code","source":["df = load_data(ticker='BTC-USD', period='max')\n","df = add_proportional_indicators(df)\n","df = add_fear_greed_index(df, load_fear_greed_index())\n","df = add_dollar_index_feature(df)\n","df = add_macro_indicators(df)\n","#df = add_sliding_window_in_df(df, window_size=10)\n","df = target_takeprofit_stoploss(df, horizon=10, tp=0.05, sl=0.04)\n","\n","#let's check how much is dataset imbalanced\n","df[df['target']==1].shape[0] / df.shape[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qa4Cn2_liUpz","executionInfo":{"status":"ok","timestamp":1738170517008,"user_tz":-240,"elapsed":2345,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}},"outputId":"1a045026-9fd6-4666-cdca-749d7376544d"},"execution_count":82,"outputs":[{"output_type":"stream","name":"stderr","text":["[*********************100%***********************]  1 of 1 completed\n","[*********************100%***********************]  1 of 1 completed\n"]},{"output_type":"execute_result","data":{"text/plain":["0.44794050343249425"]},"metadata":{},"execution_count":82}]},{"cell_type":"code","source":["X = df.drop(columns=['target'])\n","y = df['target']\n","X_train, y_train, X_valid, y_valid, X_test, y_test = train_valid_test_split(X, y)\n","#X_train, X_valid, X_test = add_pca(X_train, X_valid, X_test, n_components=6, visualize=True)"],"metadata":{"id":"apJNVhSKI5GX","executionInfo":{"status":"ok","timestamp":1738170517008,"user_tz":-240,"elapsed":6,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}}},"execution_count":83,"outputs":[]},{"cell_type":"code","source":["X_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"dAcQSivYH2nG","executionInfo":{"status":"ok","timestamp":1738170517008,"user_tz":-240,"elapsed":6,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}},"outputId":"cfe6d835-d12a-4e37-82e1-59986d041614"},"execution_count":84,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  rsi    stoch_k    stoch_d  williams_r      bb_b  macd_prop  \\\n","2018-02-01  32.505630   8.349643  13.571569  -91.650357  0.011343  -1.409894   \n","2018-02-02  31.214760  19.490396  13.727154  -80.509604 -0.014839  -2.009340   \n","2018-02-05  26.176396   3.758595  14.037466  -96.241405 -0.150800  -4.113611   \n","2018-02-06  32.424583  28.466770  14.516066  -71.533230  0.061484  -3.396009   \n","2018-02-07  31.940899  26.252162  19.492509  -73.747838  0.096551  -3.056190   \n","\n","                  adx    di_plus   di_minus        mfi         cci    atr_rel  \\\n","2018-02-01  34.516014  12.212113  36.858379  45.704092 -164.543264  13.575540   \n","2018-02-02  36.041343  11.256443  39.759198  37.586719 -214.826245  14.202324   \n","2018-02-05  39.626481  10.233754  39.503738  36.634245 -202.110680  18.376223   \n","2018-02-06  41.231588   9.232245  39.484133  36.727907 -167.964244  16.966310   \n","2018-02-07  41.874070  12.176220  36.750131  34.668268 -117.632592  17.221191   \n","\n","            fear_greed  dollar_index      CPI  FedFunds  \n","2018-02-01        30.0     88.669998  249.529      1.42  \n","2018-02-02        15.0     89.199997  249.529      1.42  \n","2018-02-05        11.0     89.550003  249.529      1.42  \n","2018-02-06         8.0     89.589996  249.529      1.42  \n","2018-02-07        36.0     90.260002  249.529      1.42  "],"text/html":["\n","  <div id=\"df-c9af2ea1-7032-4b4b-b56a-d70427e896ce\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>rsi</th>\n","      <th>stoch_k</th>\n","      <th>stoch_d</th>\n","      <th>williams_r</th>\n","      <th>bb_b</th>\n","      <th>macd_prop</th>\n","      <th>adx</th>\n","      <th>di_plus</th>\n","      <th>di_minus</th>\n","      <th>mfi</th>\n","      <th>cci</th>\n","      <th>atr_rel</th>\n","      <th>fear_greed</th>\n","      <th>dollar_index</th>\n","      <th>CPI</th>\n","      <th>FedFunds</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2018-02-01</th>\n","      <td>32.505630</td>\n","      <td>8.349643</td>\n","      <td>13.571569</td>\n","      <td>-91.650357</td>\n","      <td>0.011343</td>\n","      <td>-1.409894</td>\n","      <td>34.516014</td>\n","      <td>12.212113</td>\n","      <td>36.858379</td>\n","      <td>45.704092</td>\n","      <td>-164.543264</td>\n","      <td>13.575540</td>\n","      <td>30.0</td>\n","      <td>88.669998</td>\n","      <td>249.529</td>\n","      <td>1.42</td>\n","    </tr>\n","    <tr>\n","      <th>2018-02-02</th>\n","      <td>31.214760</td>\n","      <td>19.490396</td>\n","      <td>13.727154</td>\n","      <td>-80.509604</td>\n","      <td>-0.014839</td>\n","      <td>-2.009340</td>\n","      <td>36.041343</td>\n","      <td>11.256443</td>\n","      <td>39.759198</td>\n","      <td>37.586719</td>\n","      <td>-214.826245</td>\n","      <td>14.202324</td>\n","      <td>15.0</td>\n","      <td>89.199997</td>\n","      <td>249.529</td>\n","      <td>1.42</td>\n","    </tr>\n","    <tr>\n","      <th>2018-02-05</th>\n","      <td>26.176396</td>\n","      <td>3.758595</td>\n","      <td>14.037466</td>\n","      <td>-96.241405</td>\n","      <td>-0.150800</td>\n","      <td>-4.113611</td>\n","      <td>39.626481</td>\n","      <td>10.233754</td>\n","      <td>39.503738</td>\n","      <td>36.634245</td>\n","      <td>-202.110680</td>\n","      <td>18.376223</td>\n","      <td>11.0</td>\n","      <td>89.550003</td>\n","      <td>249.529</td>\n","      <td>1.42</td>\n","    </tr>\n","    <tr>\n","      <th>2018-02-06</th>\n","      <td>32.424583</td>\n","      <td>28.466770</td>\n","      <td>14.516066</td>\n","      <td>-71.533230</td>\n","      <td>0.061484</td>\n","      <td>-3.396009</td>\n","      <td>41.231588</td>\n","      <td>9.232245</td>\n","      <td>39.484133</td>\n","      <td>36.727907</td>\n","      <td>-167.964244</td>\n","      <td>16.966310</td>\n","      <td>8.0</td>\n","      <td>89.589996</td>\n","      <td>249.529</td>\n","      <td>1.42</td>\n","    </tr>\n","    <tr>\n","      <th>2018-02-07</th>\n","      <td>31.940899</td>\n","      <td>26.252162</td>\n","      <td>19.492509</td>\n","      <td>-73.747838</td>\n","      <td>0.096551</td>\n","      <td>-3.056190</td>\n","      <td>41.874070</td>\n","      <td>12.176220</td>\n","      <td>36.750131</td>\n","      <td>34.668268</td>\n","      <td>-117.632592</td>\n","      <td>17.221191</td>\n","      <td>36.0</td>\n","      <td>90.260002</td>\n","      <td>249.529</td>\n","      <td>1.42</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9af2ea1-7032-4b4b-b56a-d70427e896ce')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c9af2ea1-7032-4b4b-b56a-d70427e896ce button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c9af2ea1-7032-4b4b-b56a-d70427e896ce');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0e1e1498-22e9-413d-a0ce-5e9770ecfc38\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0e1e1498-22e9-413d-a0ce-5e9770ecfc38')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0e1e1498-22e9-413d-a0ce-5e9770ecfc38 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 1048,\n  \"fields\": [\n    {\n      \"column\": \"rsi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.136928216805064,\n        \"min\": 9.920239187723581,\n        \"max\": 90.7194336989379,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          69.37263426057545,\n          40.840471245178065,\n          70.51900487488966\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stoch_k\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.343788943546123,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 1038,\n        \"samples\": [\n          18.19178342172278,\n          88.04189728851257,\n          81.75723259572693\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"stoch_d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27.919124412785287,\n        \"min\": 2.71400456873056,\n        \"max\": 99.19890043823402,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          70.98076084479398,\n          23.378822899035313,\n          84.88041262675827\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"williams_r\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.343788943546127,\n        \"min\": -100.0,\n        \"max\": -0.0,\n        \"num_unique_values\": 1038,\n        \"samples\": [\n          -81.80821657827723,\n          -11.958102711487433,\n          -18.242767404273074\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bb_b\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3435868690263654,\n        \"min\": -0.5160919081526412,\n        \"max\": 1.5423560057752748,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          0.9358447761935664,\n          0.31502784604048434,\n          1.114709994482324\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"macd_prop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3642270213626702,\n        \"min\": -7.310145381458813,\n        \"max\": 4.259930463600911,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          2.129392079072982,\n          0.42753435008268115,\n          2.593220531738925\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"adx\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.608963949301527,\n        \"min\": 10.315356385915132,\n        \"max\": 63.892770278984116,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          44.7349341983012,\n          28.904638329118534,\n          26.7500529676874\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"di_plus\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.838806255260469,\n        \"min\": 3.7666300423654993,\n        \"max\": 70.10897045201573,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          38.57581648779653,\n          16.700466982283622,\n          37.63503623765748\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"di_minus\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.248890021614846,\n        \"min\": 2.1837145880514512,\n        \"max\": 63.36040061000433,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          13.703305693963724,\n          31.974154053154045,\n          13.582356038387456\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mfi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.837124214674624,\n        \"min\": 5.804647517791992,\n        \"max\": 95.36277609995685,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          83.4266635444196,\n          48.870189854696825,\n          73.13418313320216\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cci\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.0375561455706,\n        \"min\": -483.81144649531427,\n        \"max\": 498.8286638437757,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          115.79303574319759,\n          -75.16513687350557,\n          234.13679339019248\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atr_rel\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2782824069638243,\n        \"min\": 1.419407439136138,\n        \"max\": 18.376223089360572,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          6.463419095187891,\n          4.858740875363486,\n          5.026930522986248\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fear_greed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.361920968015287,\n        \"min\": 5.0,\n        \"max\": 95.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          5.0,\n          30.0,\n          18.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dollar_index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.925951346715114,\n        \"min\": 88.58999633789062,\n        \"max\": 102.81999969482422,\n        \"num_unique_values\": 644,\n        \"samples\": [\n          95.4000015258789,\n          93.7699966430664,\n          94.31999969482422\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CPI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.833203941739995,\n        \"min\": 249.529,\n        \"max\": 287.553,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          254.277,\n          268.452,\n          259.366\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FedFunds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9725345156136453,\n        \"min\": 0.05,\n        \"max\": 2.42,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          2.27,\n          0.07,\n          2.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":84}]},{"cell_type":"markdown","source":["# **Initial Model Comparison:**\n","\n","We train three “out-of-the-box” models: Logistic Regression, Random Forest, and XGBoost on the training set, evaluate on the validation set.\n","\n","All show comparable Precision/Recall trade-offs, but we emphasize Precision to minimize false positives (“false trades”).\n","\n","Observing their Precision-Recall curves, XGBoost yields more consistent performance, unaffected by which indicators we choose."],"metadata":{"id":"B7jtedCHvGbg"}},{"cell_type":"code","source":["def evaluate_model(model, X_train, y_train, X_valid, y_valid, pca='False', window=0):\n","    y_pred_train = model.predict(X_train)\n","    y_pred_valid = model.predict(X_valid)\n","    precision = precision_score(y_valid, y_pred_valid)\n","    recall = recall_score(y_valid, y_pred_valid)\n","\n","    return {\n","        'model_name': model.__class__.__name__,\n","        'pca': pca,\n","        'window': window,\n","        'train_accuracy': accuracy_score(y_train, y_pred_train),\n","        'valid_accuracy': accuracy_score(y_valid, y_pred_valid),\n","        'valid_precision': precision,\n","        'valid_recall': recall,\n","    }\n"],"metadata":{"id":"6HGsMAL4ep59","executionInfo":{"status":"ok","timestamp":1738170517008,"user_tz":-240,"elapsed":5,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}}},"execution_count":85,"outputs":[]},{"cell_type":"code","source":["def linear_model(X_train, y_train, X_valid, y_valid):\n","    #linear model\n","    lr = LogisticRegression(class_weight='balanced', max_iter=10000)\n","    lr.fit(X_train, y_train)\n","    val_pred_lr = lr.predict_proba(X_valid)[:, 1]\n","\n","    return lr, val_pred_lr\n","\n","def forest_model(X_train, y_train, X_valid, y_valid):\n","    #random forest\n","    rf = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')\n","    rf.fit(X_train, y_train)\n","    val_pred_rf = rf.predict_proba(X_valid)[:, 1]\n","\n","    return rf, val_pred_rf\n","\n","def xgb_model(X_train, y_train, X_valid, y_valid):\n","    #xgboost\n","    xgb = XGBClassifier(n_estimators=100, eval_metric='logloss')\n","    xgb.fit(X_train, y_train)\n","    val_pred_xgb = xgb.predict_proba(X_valid)[:, 1]\n","\n","    return xgb, val_pred_xgb\n"],"metadata":{"id":"zk6j4DOs4d3U","executionInfo":{"status":"ok","timestamp":1738170517008,"user_tz":-240,"elapsed":5,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}}},"execution_count":86,"outputs":[]},{"cell_type":"code","source":["scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_valid_scaled = scaler.transform(X_valid)\n","X_test_scaled = scaler.transform(X_test)\n","\n","lr, val_pred_lr = linear_model(X_train_scaled, y_train, X_valid_scaled, y_valid)\n","rf, val_pred_rf = forest_model(X_train, y_train, X_valid, y_valid)\n","xgb, val_pred_xgb = xgb_model(X_train, y_train, X_valid, y_valid)"],"metadata":{"id":"OAjcQfYBKVHq","executionInfo":{"status":"ok","timestamp":1738170518267,"user_tz":-240,"elapsed":1263,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}}},"execution_count":87,"outputs":[]},{"cell_type":"markdown","source":["**Observations on Overfitting**\n","\n","Random Forest and XGBoost typically achieve near 100% accuracy on training data, showing obvious overfitting.\n","However, their validation performance remains comparable to Logistic Regression. We plan to address overfitting more thoroughly after these initial comparisons"],"metadata":{"id":"NeXuBzh9vVth"}},{"cell_type":"code","source":["experiment_results = []\n","\n","experiment_results.append(evaluate_model(lr, X_train_scaled, y_train, X_valid_scaled, y_valid))\n","experiment_results.append(evaluate_model(rf, X_train, y_train, X_valid, y_valid))\n","experiment_results.append(evaluate_model(xgb, X_train, y_train, X_valid, y_valid))\n","\n","expirement_df = pd.DataFrame(experiment_results)\n","expirement_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"2Y-PIjQYebFs","executionInfo":{"status":"ok","timestamp":1738170518267,"user_tz":-240,"elapsed":5,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}},"outputId":"892805b0-5bd5-4d5f-eb2a-43b626b0c41f"},"execution_count":88,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               model_name    pca  window  train_accuracy  valid_accuracy  \\\n","0      LogisticRegression  False       0        0.592557        0.555133   \n","1  RandomForestClassifier  False       0        1.000000        0.528517   \n","2           XGBClassifier  False       0        1.000000        0.539924   \n","\n","   valid_precision  valid_recall  \n","0         0.400000      0.034783  \n","1         0.448276      0.339130  \n","2         0.472727      0.452174  "],"text/html":["\n","  <div id=\"df-b33236b3-6408-4637-98d6-6f5119cc1452\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model_name</th>\n","      <th>pca</th>\n","      <th>window</th>\n","      <th>train_accuracy</th>\n","      <th>valid_accuracy</th>\n","      <th>valid_precision</th>\n","      <th>valid_recall</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LogisticRegression</td>\n","      <td>False</td>\n","      <td>0</td>\n","      <td>0.592557</td>\n","      <td>0.555133</td>\n","      <td>0.400000</td>\n","      <td>0.034783</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>RandomForestClassifier</td>\n","      <td>False</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>0.528517</td>\n","      <td>0.448276</td>\n","      <td>0.339130</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>XGBClassifier</td>\n","      <td>False</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>0.539924</td>\n","      <td>0.472727</td>\n","      <td>0.452174</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b33236b3-6408-4637-98d6-6f5119cc1452')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b33236b3-6408-4637-98d6-6f5119cc1452 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b33236b3-6408-4637-98d6-6f5119cc1452');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e1799f5a-c083-4da3-85c8-f5f521451192\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e1799f5a-c083-4da3-85c8-f5f521451192')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e1799f5a-c083-4da3-85c8-f5f521451192 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_60fb7b1c-a175-4f1f-84d0-b445fdf3369d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('expirement_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_60fb7b1c-a175-4f1f-84d0-b445fdf3369d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('expirement_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"expirement_df","summary":"{\n  \"name\": \"expirement_df\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"model_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"LogisticRegression\",\n          \"RandomForestClassifier\",\n          \"XGBClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pca\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"False\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"window\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23523718029004792,\n        \"min\": 0.5925572519083969,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"valid_accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013353173324274704,\n        \"min\": 0.5285171102661597,\n        \"max\": 0.5551330798479087,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.5551330798479087\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"valid_precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.037008302086671635,\n        \"min\": 0.4,\n        \"max\": 0.4727272727272727,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"valid_recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21587879630568618,\n        \"min\": 0.034782608695652174,\n        \"max\": 0.45217391304347826,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.034782608695652174\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":["fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15, 5))\n","\n","ConfusionMatrixDisplay.from_predictions(y_valid, (val_pred_lr >= 0.5).astype(int), ax=axes[0], cmap=plt.cm.Blues, colorbar=False)\n","axes[0].set_title('LogReg')\n","\n","ConfusionMatrixDisplay.from_predictions(y_valid, (val_pred_rf >= 0.5).astype(int), ax=axes[1],   cmap=plt.cm.Blues, colorbar=False)\n","axes[1].set_title('RF')\n","\n","ConfusionMatrixDisplay.from_predictions(y_valid, (val_pred_xgb >= 0.5).astype(int), ax=axes[2], cmap=plt.cm.Blues, colorbar=False)\n","axes[2].set_title('XGB')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":505},"id":"BcSHqiJefwqZ","executionInfo":{"status":"ok","timestamp":1738170519009,"user_tz":-240,"elapsed":746,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}},"outputId":"6748221a-27e2-47cb-9e40-b3e94173d3f1"},"execution_count":89,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 3 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **Deciding on XGBoost:**\n","\n","XGB looks like the most prospective option due to stability and its consistent performance across multiple feature sets. (as clearly seen on precision-recall charts)\n","\n","It's worth mentioning that feature importances reveal that XGB and RF share similar top features, while Logistic Regression differs markedly."],"metadata":{"id":"A5VQj93cvyJb"}},{"cell_type":"code","source":["precision1, recall1, thresholds1 = precision_recall_curve(y_valid, val_pred_lr)\n","precision2, recall2, thresholds2 = precision_recall_curve(y_valid, val_pred_rf)\n","precision3, recall3, thresholds3 = precision_recall_curve(y_valid, val_pred_xgb)\n","\n","fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(15, 5))\n","\n","tau = 0.5\n","\n","axes[0].plot(thresholds1, precision1[:-1], label='precision')\n","axes[0].plot(thresholds1, recall1[:-1], label='recall')\n","axes[0].hlines(y=0.5, xmin=0, xmax=1, label='min. precision', linestyles='dashed')\n","axes[0].vlines(tau, ymin=0, ymax=1, color='red', label='opt. threshold', linestyles='dashed')\n","\n","axes[0].legend()\n","axes[0].set_xlabel('threshold')\n","axes[0].set_ylabel('metric')\n","axes[0].set_title('LogReg')\n","\n","axes[1].plot(thresholds2, precision2[:-1], label='precision')\n","axes[1].plot(thresholds2, recall2[:-1], label='recall')\n","axes[1].hlines(y=0.5, xmin=0, xmax=1, label='min. precision', linestyles='dashed')\n","axes[1].vlines(tau, ymin=0, ymax=1, color='red', label='opt. threshold', linestyles='dashed')\n","\n","axes[1].legend()\n","axes[1].set_xlabel('threshold')\n","axes[1].set_ylabel('metric')\n","axes[1].set_title('RF')\n","\n","\n","axes[2].plot(thresholds3, precision3[:-1], label='precision')\n","axes[2].plot(thresholds3, recall3[:-1], label='recall')\n","axes[2].hlines(y=0.5, xmin=0, xmax=1, label='min. precision', linestyles='dashed')\n","axes[2].vlines(tau, ymin=0, ymax=1, color='red', label='opt. threshold', linestyles='dashed')\n","\n","axes[2].legend()\n","axes[2].set_xlabel('threshold')\n","axes[2].set_ylabel('metric')\n","axes[2].set_title('XGB')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":482},"id":"g3gucP5jwzrC","executionInfo":{"status":"ok","timestamp":1738170520556,"user_tz":-240,"elapsed":1549,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}},"outputId":"4f339488-7630-4852-9ed6-7ea1e6a89715"},"execution_count":90,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 3 Axes>"],"image/png":"\n"},"metadata":{}}]},{"source":["importances = lr.coef_[0]\n","feature_importances = pd.Series(importances, index=X_train.columns)\n","\n","feature_importances.sort_values(ascending=False, key=abs, inplace=True)\n","print(feature_importances.head(10))\n"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"608axnu1hTOX","executionInfo":{"status":"ok","timestamp":1738170520556,"user_tz":-240,"elapsed":8,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}},"outputId":"136210f2-3ed7-4996-880d-f938ce9012a7"},"execution_count":91,"outputs":[{"output_type":"stream","name":"stdout","text":["bb_b          0.557987\n","di_minus     -0.273685\n","mfi           0.217257\n","macd_prop    -0.210247\n","adx           0.201125\n","FedFunds     -0.181398\n","fear_greed   -0.171707\n","stoch_d      -0.144805\n","rsi          -0.138405\n","CPI          -0.082112\n","dtype: float64\n"]}]},{"cell_type":"code","source":["importances = rf.feature_importances_\n","feature_importances = pd.Series(importances, index=X_train.columns)\n","print(feature_importances[:10].sort_values(ascending=False))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6WntUkMaRdc1","executionInfo":{"status":"ok","timestamp":1738170520556,"user_tz":-240,"elapsed":6,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}},"outputId":"309e180d-1887-484b-e07b-3c81336d64ff"},"execution_count":92,"outputs":[{"output_type":"stream","name":"stdout","text":["adx           0.089414\n","di_minus      0.077141\n","macd_prop     0.064168\n","mfi           0.062584\n","stoch_d       0.060404\n","rsi           0.060304\n","di_plus       0.059883\n","bb_b          0.055863\n","stoch_k       0.053230\n","williams_r    0.052456\n","dtype: float64\n"]}]},{"cell_type":"code","source":["importances = xgb.feature_importances_\n","feature_importances = pd.Series(importances, index=X_train.columns)\n","print(feature_importances[:10].sort_values(ascending=False))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mZIVFj2bSvOu","executionInfo":{"status":"ok","timestamp":1738170520556,"user_tz":-240,"elapsed":5,"user":{"displayName":"Leo Fisher","userId":"03911342038564222893"}},"outputId":"5a24d1b3-c0a4-4c80-e439-e0d1937dcb92"},"execution_count":93,"outputs":[{"output_type":"stream","name":"stdout","text":["adx           0.085269\n","stoch_k       0.071079\n","di_minus      0.068144\n","rsi           0.061624\n","stoch_d       0.059022\n","macd_prop     0.057061\n","bb_b          0.056733\n","mfi           0.056035\n","di_plus       0.052710\n","williams_r    0.000000\n","dtype: float32\n"]}]},{"cell_type":"markdown","source":["# **Sliding Window & PCA**\n","\n","Testing windows of varioius sizes and incorporation of PCA does not significantly improve metrics.\n","Consequently, we opt not to complicate the pipeline further. The model uses core indicators (technical + macro + Fear & Greed) in their proportional forms."],"metadata":{"id":"89MZ7imJwZK3"}},{"cell_type":"code","source":["#windows(5, 10, 15)\n","for w in [5, 10, 15]:\n","    df_window = add_sliding_window_in_df(df, window_size=w)\n","    X = df_window.drop(columns=['target'])\n","    y = df_window['target']\n","    X_train, y_train, X_valid, y_valid, X_test, y_test = train_valid_test_split(X, y)\n","    xgb, val_pred_xgb = xgb_model(X_train, y_train, X_valid, y_valid)\n","\n","    experiment_results.append(evaluate_model(xgb, X_train, y_train, X_valid, y_valid, pca='False', window=w))"],"metadata":{"id":"h6-Rjsxk0T5Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["expirement_df = pd.DataFrame(experiment_results)\n","expirement_df"],"metadata":{"id":"qC6dP5V392NI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#windows with pca\n","for w in [5, 10, 15, 20, 25]:\n","    for c in [6, 10, 15, 20, 25, 30]:\n","        df_window = add_sliding_window_in_df(df, window_size=w)\n","        X = df_window.drop(columns=['target'])\n","        y = df_window['target']\n","        X_train, y_train, X_valid, y_valid, X_test, y_test = train_valid_test_split(X, y)\n","        X_train, X_valid, X_test = add_pca(X_train, X_valid, X_test, n_components=c, visualize=False)\n","\n","        xgb, val_pred_xgb = xgb_model(X_train, y_train, X_valid, y_valid)\n","\n","        experiment_results.append(evaluate_model(xgb, X_train, y_train, X_valid, y_valid, pca=c, window=w))"],"metadata":{"id":"KgkfPxYe-_ye"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["expirement_df = pd.DataFrame(experiment_results)\n","expirement_df.head(100)"],"metadata":{"id":"d6tgoUmGDl4s"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Cross-Validation & Hyperparameter Tuning:**\n","\n","Using time-aware cross-validation (TimeSeriesSplit) on the training set, we optimized XGBoost’s hyperparameters. Precision was our primary optimization goal due to the critical need to minimize false signals, while maintaining recall above an acceptable threshold. Our cross-validation results showed that XGBoost maintained a stable precision above 50% across various hyperparameter configurations, even as recall gradually declined."],"metadata":{"id":"DK9O5df0wtYL"}},{"cell_type":"code","source":["def timeaware_cv_xgb(X, y, n_splits=5):\n","    xgb_model = XGBClassifier(\n","        use_label_encoder=False,\n","        eval_metric='logloss',\n","    )\n","\n","    param_grid = {\n","        'learning_rate': [0.01, 0.05, 0.1],\n","        'max_depth': [3, 5, 7],\n","        'n_estimators': [100, 300, 500],\n","        'subsample': [0.8, 1.0],\n","        'colsample_bytree': [0.8, 1.0]\n","    }\n","\n","    tscv = TimeSeriesSplit(n_splits=n_splits)\n","\n","    grid_search = GridSearchCV(\n","        estimator=xgb_model,\n","        param_grid=param_grid,\n","        scoring='precision',\n","        cv=tscv,\n","        n_jobs=-1,\n","        verbose=1\n","    )\n","\n","    grid_search.fit(X, y)\n","\n","    print(\"Best xgb params:\", grid_search.best_params_)\n","    print(\"Best CV Precision score:\", grid_search.best_score_)\n","\n","    return grid_search.best_estimator_, grid_search.best_params_\n"],"metadata":{"id":"vpJc1Jl9Gj66"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head(5)"],"metadata":{"id":"C4t1Za4d-Qsr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = df.drop(columns=['target'])\n","y = df['target']\n","X_train, y_train, X_valid, y_valid, X_test, y_test = train_valid_test_split(X, y)\n","xgb_estimator, xgb_params = timeaware_cv_xgb(X_train, y_train)"],"metadata":{"id":"-8PMiLToG2Wa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["experiment_results.append(evaluate_model(xgb_estimator, X_train, y_train, X_valid, y_valid))\n","\n","expirement_df = pd.DataFrame(experiment_results)\n","expirement_df"],"metadata":{"id":"VAXwRpT-KSNm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Threshold Optimization:**\n","\n","Observing that the distribution of probability estimates for positive class predictions is generally normal—meaning the model was rarely highly confident—we experimented with lowering the classification threshold. By leaving the threshold at 0.5 on the validation set, we successfully increased recall to around 50% while keeping precision above 50%."],"metadata":{"id":"yG6yK0VQxPeJ"}},{"cell_type":"code","source":["plt.hist(xgb_estimator.predict_proba(X_test)[:, 1], bins=50, color='blue', alpha=0.7)\n","plt.title('Distribution of predictions')\n","plt.xlabel('Predictions')\n","plt.show()\n"],"metadata":{"id":"UiCZO4o8c0lr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["precision, recall, thresholds = precision_recall_curve(y_test, xgb_estimator.predict_proba(X_test)[:, 1])\n","\n","fig, axes = plt.subplots(figsize=(5, 5))\n","\n","tau = 0.5\n","plt.plot(thresholds, precision[:-1], label='precision')\n","plt.plot(thresholds, recall[:-1], label='recall')\n","plt.hlines(y=0.5, xmin=0, xmax=1, label='min. precision', linestyles='dashed')\n","plt.vlines(tau, ymin=0, ymax=1, color='red', label='opt. threshold', linestyles='dashed')\n","\n","plt.legend()\n","plt.xlabel('threshold')\n","plt.ylabel('metric')\n","plt.title('XGB')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"2jQ5W_3KNuOn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig, ax = plt.subplots(figsize=(6, 6))\n","\n","y_pred = (xgb_estimator.predict_proba(X_test)[:, 1] >= 0.5).astype(int)\n","\n","ConfusionMatrixDisplay.from_predictions(\n","    y_test,\n","    y_pred,\n","    ax=ax,\n","    cmap=plt.cm.Blues,\n","    colorbar=False\n",")\n","ax.set_title('XGB Confusion Matrix')\n","\n","plt.tight_layout()\n","plt.show()\n"],"metadata":{"id":"ol30cmF6L3qJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Final Evaluation on Test Set:**\n","\n","With the threshold set to 0.45, we applied our optimized XGBoost model to the untouched test set. The model achieved a precision of 56% and a recall of 42%, which confirmed its stable performance and suitability for practical applications.\n","\n","A fixed random state was intentionally omitted to demonstrate that the approach ensures model stability. As a result, running the code from the beginning may show slightly different results."],"metadata":{"id":"2EKtpgpSxVuD"}},{"cell_type":"code","source":["probas = xgb_estimator.predict_proba(X_test)[:, 1]\n","\n","tau = 0.5\n","y_pred = (probas >= tau).astype(int)\n","\n","precision = precision_score(y_test, y_pred)\n","recall = recall_score(y_test, y_pred)\n","\n","print(f\"Precision: {precision}\")\n","print(f\"Recall: {recall}\")"],"metadata":{"id":"Fp_07adGekoT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Conclusion:**\n","The combination of robust proportional technical and macroeconomic indicators, careful time-aware cross-validation, and strategic threshold adjustment has resulted in an XGBoost model capable of providing reliable predictions for Bitcoin price movements. The final model's precision and recall metrics suggest that, despite inherent uncertainties in financial data, our approach can yield a stable and potentially profitable trading signal with a reduced likelihood of false positives."],"metadata":{"id":"k-c039AKyUCM"}}]}